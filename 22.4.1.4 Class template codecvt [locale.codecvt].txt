22.4.1.4 Class template codecvt [locale.codecvt]

    namespace std {
        class codecvt_base {
        public:
            enum result { ok, partial, error, noconv };
        };
    
        template <class internT, class externT, class stateT>
        class codecvt : public locale::facet, public codecvt_base {
        public:
            typedef internT intern_type;
            typedef externT extern_type;
            typedef stateT state_type;
    
            explicit codecvt(size_t refs = 0);
    
            result out(stateT& state,
                       const internT* from, const internT* from_end, const internT*& from_next,
                       externT*   to,       externT* to_end, externT*& to_next) const;
            result unshift(stateT& state,
                           externT*   to,        externT* to_end, externT*& to_next) const;
            result in(stateT& state,
                      const externT* from, const externT* from_end, const externT*& from_next,
                      internT*   to,       internT* to_end, internT*& to_next) const;
            int encoding() const throw();
            bool always_noconv() const throw();
            int length(stateT&, const externT* from, const externT* end,
                       size_t max) const;
            int max_length() const throw();
    
            static locale::id id;
    
        protected:
            ~codecvt();
            virtual result do_out(stateT& state,
                                  const internT* from, const internT* from_end, const internT*& from_next,
                                  externT* to,         externT* to_end, externT*& to_next) const;
            virtual result do_in(stateT& state,
                                 const externT* from, const externT* from_end, const externT*& from_next,
                                 internT* to,         internT* to_end, internT*& to_next) const;
            virtual result do_unshift(stateT& state,
                                      externT* to, externT* to_end, externT*& to_next) const;
            virtual int do_encoding() const throw();
            virtual bool do_always_noconv() const throw();
            virtual int do_length(stateT&, const externT* from,
                                  const externT* end, size_t max) const;
            virtual int do_max_length() const throw();
        };
    }

1 The class codecvt<internT,externT,stateT> is for use when converting from one character encoding to another, such as from wide characters to multibyte characters or between wide character encodings such as Unicode and EUC.

1 クラス codecvt<internT,externT,stateT> はワイド文字からマルチバイト文字もしくは Unicode や EUC のようなワイド文字符号間のような、ある文字符号から別のものに変換する際に用いられる。

2 The stateT argument selects the pair of character encodings being mapped between.

2 stateT 引数は両者間にマップされる文字符号の組を選択する。

3 The specializations required in Table 76 (22.3.1.1.1) convert the implementation-defined native character set. codecvt<char, char, mbstate_t> implements a degenerate conversion; it does not convert at all. The specialization codecvt<char16_t, char, mbstate_t> converts between the UTF-16 and UTF-8 encodings schemes, and the specialization codecvt <char32_t, char, mbstate_t> converts between the UTF-32 and UTF-8 encodings schemes. codecvt<wchar_t,char,mbstate_t> converts between the native character sets for narrow and wide characters. Specializations on mbstate_t perform conversion between encodings known to the library implementor. Other encodings can be converted by specializing on a user-defined stateT type.  The stateT object can contain any state that is useful to communicate to or from the specialized do_in or do_out members.

3 表 76 ( 22.3.1.1.1 ) において要件化されている特殊化は処理系定義のシステム固有の文字集合を変換する。 codecvt<char, char, mbstate_t> は退化した変換を実装する。つまり全く変換を行わない。特殊化 codecvt<char16_t, char, mbstate_t> は UTF-16 符号化方式と UTF-8 符号化方式間を変換し、特殊化 codecvt <char32_t, char, mbstate_t> は UTF-32 符号化方式と UTF-8 符号化方式間を変換する。 codecvt<wchar_t,char,mbstate_t> はシステム固有の文字集合においてナロウ文字とワイド文字間を変換する。 mbstate_t を用いた特殊化はライブラリ実装者にとって既知な符号間の変換を行う。他の符号は利用者定義の stateT 型の特殊化によって変換可能である。 stateT オブジェクトは特殊化されたメンバー do_in もしくは do_out (から|へ)のやりとりに有用な任意の状態を保持可能である。

