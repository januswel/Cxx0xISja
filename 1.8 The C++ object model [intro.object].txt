1.8 The C++ object model [intro.object]

1 The constructs in a C++ program create, destroy, refer to, access, and manipulate objects. An object is a region of storage. [ Note: A function is not an object, regardless of whether or not it occupies storage in the way that objects do. -end note ] An object is created by a definition (3.1), by a new-expression (5.3.4) or by the implementation (12.2) when needed. The properties of an object are determined when the object is created. An object can have a name (Clause 3). An object has a storage duration (3.7) which influences its lifetime (3.8). An object has a type (3.9). The term object type refers to the type with which the object is created. Some objects are polymorphic (10.3); the implementation generates information associated with each such object that makes it possible to determine that object's type during program execution. For other objects, the interpretation of the values found therein is determined by the type of the expressions (Clause 5) used to access them.

1 C++ プログラムにおける構成物はオブジェクトを生成し、破壊し、参照し、アクセスし、操作する。 { オブジェクト } とは記憶装置の領域である。 [ 注: オブジェクトと同じ方法で記憶装置を占有するしないに関わらず、関数はオブジェクトではない。 ] オブジェクトは { 定義 } ( 3.1 ) 、 { new 式 } ( 5.3.4 ) 、もしくは処理系が必要とするときに処理系によって生成される。オブジェクトの性質はオブジェクトが生成されたときに決定される。オブジェクトは { 名前 } を持つ ( 3 条 ) 。オブジェクトはその { 生存期間 } を左右する { 記憶域期間 } ( 3.7 ) を持つ。オブジェクトは { 型 } ( 3.9 ) を持つ。 { オブジェクト型 } という語句はオブジェクトが生成された際の型を示す。いくつかのオブジェクトは { 多態的 } である ( 10.3 ) 。つまり処理系はオブジェクトの型をプログラム実行時に決定できるような各々のオブジェクトに関連する情報を生成する。その他のオブジェクトにおいて、その時点で見つかる値の実装はそれらへアクセスするために使われる { 式 } の型 ( 5 条 ) によって決定される。

2 Objects can contain other objects, called subobjects. A subobject can be a member subobject (9.2), a base class subobject (Clause 10), or an array element. An object that is not a subobject of any other object is called a complete object.

2 オブジェクトは { サブオブジェクト } と呼ばれる、他のオブジェクトを包含できる。サブオブジェクトは { メンバーサブオブジェクト } ( 9.2 ) 、 { 基底クラスサブオブジェクト } ( 10 条 ) 、配列要素になることができる。他のいずれのオブジェクトのサブオブジェクトでないオブジェクトを { 完全オブジェクト } と呼ぶ。

3 For every object x, there is some object called the complete object of x, determined as follows:

    - If x is a complete object, then x is the complete object of x.
    - Otherwise, the complete object of x is the complete object of the (unique) object that contains x.

3 すべてのオブジェクト x において、以下によって決定される x { から成る完全オブジェクト } と呼ばれるいくつかのオブジェクトが存在する。

    - x が完全オブジェクトである場合、 x は x から成る完全オブジェクトである。
    - そうでない場合、 x から成る完全オブジェクトとは x を包含する ( 固有の ) オブジェクトから成る完全オブジェクトである。

4 If a complete object, a data member (9.2), or an array element is of class type, its type is considered the most derived class, to distinguish it from the class type of any base class subobject; an object of a most derived class type or of a non-class type is called a most derived object.

4 完全オブジェクト、データメンバー ( 9.2 ) 、配列要素がクラス型から成る場合、その型はいずれの基底クラスサブオブジェクトのクラス型とも区別される、 { 直派生クラス } であるとみなされる。直派生クラス型もしくはクラスでない型のオブジェクトを { 直派生オブジェクト } と呼ぶ。

5 Unless it is a bit-field (9.6), a most derived object shall have a non-zero size and shall occupy one or more bytes of storage. Base class subobjects may have zero size. An object of trivially copyable or standard-layout type (3.9) shall occupy contiguous bytes of storage.

5 ビットフィールド ( 9.6 ) でない場合、直派生オブジェクトは非零の容量を持たなければならず記憶装置の一バイト以上を占有しなければならない。基底クラスサブオブジェクトは零の容量であってよい。自明にコピー可能もしくは標準割り付け型 ( 3.9 ) のオブジェクトは記憶装置の連続したバイトを占有すべきである。

6 [ Note: C++ provides a variety of built-in types and several ways of composing new types from existing types (3.9). -end note ]

6 [ 注: C++ は様々な組み込み型 ( 3.9 ) と既存の型から新しい型を構成する多様な方法を提供する。 ]

